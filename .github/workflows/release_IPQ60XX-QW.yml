name: Release-IPQ60XX-QW
on:
  workflow_dispatch:
  workflow_call:
  schedule:
    - cron: '0 20 * * 4'

env:
  # 通用环境变量
  GENERAL_CONFIG_FILE: deconfig/General.config
  DIY_SCRIPT: scripts/Roc-script.sh
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: IPQ60XX-Builds
  TZ: Asia/Shanghai
  # 定义所有需要编译的设备模型
  MODELS: |
    ipq60xx_immwrt_Pro
    ipq60xx_immwrt_Max
    ipq60xx_immwrt_Ultra
    ipq60xx_openwrt_Pro
    ipq60xx_openwrt_Max
    ipq60xx_openwrt_Ultra
    ipq60xx_libwrt_Pro
    ipq60xx_libwrt_Max
    ipq60xx_libwrt_Ultra

jobs:
  Build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # 使用更简单的数组定义方式
        model: [
          "ipq60xx_immwrt_Pro",
          "ipq60xx_immwrt_Max", 
          "ipq60xx_immwrt_Ultra",
          "ipq60xx_openwrt_Pro",
          "ipq60xx_openwrt_Max",
          "ipq60xx_openwrt_Ultra",
          "ipq60xx_libwrt_Pro",
          "ipq60xx_libwrt_Max",
          "ipq60xx_libwrt_Ultra"
        ]
    steps:
    - name: Check Server Performance(检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB)"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization Environment(初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"

    - name: Checkout(检出代码)
      uses: actions/checkout@main

    - name: Parse Model Info(解析模型信息)
      id: parse_model
      run: |
        MODEL="${{ matrix.model }}"
        echo "MODEL=$MODEL" >> $GITHUB_ENV

        # 分解模型名称
        CHIP=$(echo "$MODEL" | cut -d'_' -f1) # ipq60xx
        BRANCH_ABBR=$(echo "$MODEL" | cut -d'_' -f2) # immwrt, openwrt, libwrt
        DEVICE_TYPE=$(echo "$MODEL" | cut -d'_' -f3) # Pro, Max, Ultra

        echo "CHIP=$CHIP" >> $GITHUB_ENV
        echo "BRANCH_ABBR=$BRANCH_ABBR" >> $GITHUB_ENV
        echo "DEVICE_TYPE=$DEVICE_TYPE" >> $GITHUB_ENV

        # 设置仓库URL和分支
        case "$BRANCH_ABBR" in
          immwrt)
            REPO_URL="https://github.com/laipeng668/immortalwrt.git"
            REPO_BRANCH="master"
            ;;
          openwrt)
            REPO_URL="https://github.com/laipeng668/openwrt.git"
            REPO_BRANCH="master"
            ;;
          libwrt)
            REPO_URL="https://github.com/laipeng668/immortalwrt.git"
            REPO_BRANCH="k6.12-nss"
            ;;
          *)
            echo "Unsupported branch abbreviation: $BRANCH_ABBR"
            exit 1
            ;;
        esac

        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV

        # 设置配置文件路径
        case "$DEVICE_TYPE" in
          Pro)
            CONFIG_FILE="deconfig/Pro.config"
            ;;
          Max)
            CONFIG_FILE="deconfig/Max.config"
            ;;
          Ultra)
            CONFIG_FILE="deconfig/Ultra.config"
            ;;
          *)
            echo "Unsupported device type: $DEVICE_TYPE"
            exit 1
            ;;
        esac

        echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV

        # 构建最终配置文件路径
        FINAL_CONFIG_FILE="$GENERAL_CONFIG_FILE"
        if [ "$DEVICE_TYPE" = "Pro" ] || [ "$DEVICE_TYPE" = "Max" ] || [ "$DEVICE_TYPE" = "Ultra" ]; then
          FINAL_CONFIG_FILE="$FINAL_CONFIG_FILE $CONFIG_FILE"
          if [ "$BRANCH_ABBR" = "libwrt" ]; then
            FINAL_CONFIG_FILE="$FINAL_CONFIG_FILE deconfig/libwrt.config"
          fi
        fi
        echo "FINAL_CONFIG_FILE=$FINAL_CONFIG_FILE" >> $GITHUB_ENV

    - name: Clone Source Code(克隆源代码)
      run: |
        df -hT $GITHUB_WORKSPACE
        sudo mkdir -p /mnt/openwrt
        sudo chown -R $(id -u):$(id -g) /mnt/openwrt
        git clone --depth 1 -b ${{ env.REPO_BRANCH }} --single-branch ${{ env.REPO_URL }} /mnt/openwrt
        cd /mnt/openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
        echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

    - name: Generate Variables(生成变量)
      run: |
        cd $OPENWRT_PATH
        # 使用最终配置文件
        cat ${{ env.FINAL_CONFIG_FILE }} > .config
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo ${{ env.REPO_URL }} | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
        echo "CACHE_DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV

    - name: Cache Toolchain(缓存工具链)
      uses: actions/cache@main
      with:
        key: ${{ env.DEVICE_TARGET }}-${{ env.HASH }} ${{ env.CACHE_DATE }}
        restore-keys: ${{ env.DEVICE_TARGET }}-${{ env.HASH }}-
        path: |
          ${{ env.OPENWRT_PATH }}/.ccache
          ${{ env.OPENWRT_PATH }}/staging_dir

    - name: Refresh The Cache(刷新缓存)
      run: |
        if [ -d "$OPENWRT_PATH/staging_dir" ]; then
          find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
              find "$dir" -type f -exec touch {} +
          done
        fi

    - name: Install Feeds(安装feeds)
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load Custom Configuration(加载自定义配置)
      run: |
        chmod +x ${{ env.DIY_SCRIPT }}
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/${{ env.DIY_SCRIPT }}

    - name: Download DL Package(下载DL软件包)
      run: |
        cd $OPENWRT_PATH
        make defconfig
        make download -j$(nproc)

    - name: Compile Firmware(开始编译固件)
      id: compile
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: Check Space Usage(检查空间使用情况)
      if: (!cancelled())
      run: df -hT

    - name: Organize Files(整理文件)
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        echo "Current directory: $(pwd)"

        # 获取原始文件名 (假设只有一个 bin 文件)
        ORIGINAL_BIN=$(find . -maxdepth 1 -type f -name "*.bin" | head -n 1)
        if [ -z "$ORIGINAL_BIN" ]; then
           echo "No .bin file found!"
           exit 1
        fi
        echo "Original binary: $ORIGINAL_BIN"

        # 提取原始文件名中的固件型号 (re-ss-01 或 re-cs-02)
        ORIG_MODEL_NAME=$(basename "$ORIGINAL_BIN" | sed -n 's/.*\([re]-[a-z0-9]\{2\}-[0-9]\{2\}\).*/\1/p')
        if [ -z "$ORIG_MODEL_NAME" ]; then
           echo "Could not extract model name from $ORIGINAL_BIN"
           exit 1
        fi
        echo "Original model name: $ORIG_MODEL_NAME"

        # 确定文件类型 (factory or sysupgrade)
        FILE_TYPE=$(basename "$ORIGINAL_BIN" | sed -n 's/.*\.\(squashfs\)-\(factory\|sysupgrade\)\..*/\2/p')
        if [ -z "$FILE_TYPE" ]; then
           echo "Could not determine file type from $ORIGINAL_BIN"
           exit 1
        fi
        echo "File type: $FILE_TYPE"

        # 构造新文件名
        NEW_FILENAME="${{ env.BRANCH_ABBR }}-${ORIG_MODEL_NAME}-${FILE_TYPE}-${{ env.DEVICE_TYPE }}.bin"
        echo "New filename will be: $NEW_FILENAME"

        # 复制并重命名
        cp "$ORIGINAL_BIN" "$NEW_FILENAME"
        echo "Renamed $ORIGINAL_BIN to $NEW_FILENAME"

        # 复制 manifest 和 buildinfo
        cp config.buildinfo "${{ env.CHIP }}-${{ env.BRANCH_ABBR }}-${{ env.DEVICE_TYPE }}.config.buildinfo"
        cp immortalwrt-qualcommax-ipq60xx.manifest "${{ env.CHIP }}-${{ env.BRANCH_ABBR }}-${{ env.DEVICE_TYPE }}.manifest"
        cp Packages.manifest "${{ env.CHIP }}-${{ env.BRANCH_ABBR }}-${{ env.DEVICE_TYPE }}.Packages.manifest"
        cp $OPENWRT_PATH/.config "${{ env.CHIP }}-${{ env.BRANCH_ABBR }}-${{ env.DEVICE_TYPE }}.config"

        # 创建输出目录用于收集所有产物
        mkdir -p ${{ github.workspace }}/firmware_output
        cp *.bin ${{ github.workspace }}/firmware_output/
        cp *.buildinfo ${{ github.workspace }}/firmware_output/
        cp *.manifest ${{ github.workspace }}/firmware_output/
        cp ${{ env.CHIP }}-${{ env.BRANCH_ABBR }}-${{ env.DEVICE_TYPE }}.config ${{ github.workspace }}/firmware_output/

    - name: Upload Firmware To Artifact(将固件上传到Artifact)
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}-${{ matrix.model }}
        path: ${{ github.workspace }}/firmware_output/*

  # 合并所有编译结果并发布到 Release
  Publish_Release:
    needs: Build # 等待所有 Build jobs 完成
    runs-on: ubuntu-22.04
    if: always() # 即使某个 Build job 失败也尝试执行此 job (可选)
    steps:
    - name: Download All Artifacts(下载所有工件)
      uses: actions/download-artifact@main
      with:
        path: ./artifacts

    - name: Create Release Assets Directory(创建发布资产目录)
      run: |
        mkdir -p ./release_assets

    - name: Move and Rename Assets(移动并重命名资产)
      run: |
        # 遍历所有下载的工件
        for artifact_dir in ./artifacts/*; do
          if [ -d "$artifact_dir" ]; then
            echo "Processing artifact directory: $artifact_dir"
            # 移动文件到统一目录
            cp -r "$artifact_dir"/* ./release_assets/
          fi
        done

    - name: Upload Firmware To Release(发布固件)
      if: env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ./release_assets/*
        body: |
          **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
          ### 📒 固件信息
          - 包含多个设备平台的固件构建。
          - 💻 请根据您的设备型号选择对应的固件。
          - ⚽ 固件源码: https://github.com/laipeng668/immortalwrt.git
          - 💝 源码分支: master/k6.12-nss
          - 🌐 默认地址: **192.168.2.1**
          - 🔑 默认密码: none
          ### 🧊 固件版本
          - 固件内核版本：**${{ env.VERSION_KERNEL }}**
          - 固件编译前最后一次➦[主源码](https://github.com/laipeng668/immortalwrt.git)更新记录
          - ${{ env.VERSION_INFO }}
          ### 📦 已包含的设备
          - ipq60xx_immwrt_Pro
          - ipq60xx_immwrt_Max
          - ipq60xx_immwrt_Ultra
          - ipq60xx_openwrt_Pro
          - ipq60xx_openwrt_Max
          - ipq60xx_openwrt_Ultra
          - ipq60xx_libwrt_Pro
          - ipq60xx_libwrt_Max
          - ipq60xx_libwrt_Ultra
