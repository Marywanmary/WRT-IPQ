name: Release-IQP60XX-CZ

on:
  workflow_dispatch:
  workflow_call:
  schedule:
    - cron: '0 20 * * 4'

env:
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        device: [
          "ipq60xx_immwrt_Pro",
          "ipq60xx_immwrt_Max",
          "ipq60xx_immwrt_Ultra",
          "ipq60xx_openwrt_Pro",
          "ipq60xx_openwrt_Max",
          "ipq60xx_openwrt_Ultra",
          "ipq60xx_libwrt_Pro",
          "ipq60xx_libwrt_Max",
          "ipq60xx_libwrt_Ultra"
        ]
    
    steps:
    - name: 检查服务器性能
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"

    - name: 检出代码
      uses: actions/checkout@main

    - name: 设置环境变量
      run: |
        # 解析设备model
        CHIP=$(echo "${{ matrix.device }}" | cut -d'_' -f1)
        BRANCH_ABBR=$(echo "${{ matrix.device }}" | cut -d'_' -f2)
        CONFIG_TYPE=$(echo "${{ matrix.device }}" | cut -d'_' -f3)
        
        # 设置源代码仓库和分支
        case $BRANCH_ABBR in
          "immwrt")
            REPO_URL="https://github.com/laipeng668/immortalwrt.git"
            REPO_BRANCH="master"
            ;;
          "openwrt")
            REPO_URL="https://github.com/laipeng668/openwrt.git"
            REPO_BRANCH="master"
            ;;
          "libwrt")
            REPO_URL="https://github.com/laipeng668/immortalwrt.git"
            REPO_BRANCH="k6.12-nss"
            ;;
        esac
        
        # 设置配置文件路径（修改为deconfig/）
        GENERAL_CONFIG_FILE="deconfig/General.config"
        CONFIG_TYPE_FILE="deconfig/${CONFIG_TYPE}.config"
        
        # 如果是libwrt，添加额外的配置文件
        if [ "$BRANCH_ABBR" = "libwrt" ]; then
          LIBWRT_CONFIG_FILE="deconfig/libwrt.config"
          echo "LIBWRT_CONFIG_FILE=$LIBWRT_CONFIG_FILE" >> $GITHUB_ENV
        fi
        
        # 设置其他环境变量
        echo "CHIP=$CHIP" >> $GITHUB_ENV
        echo "BRANCH_ABBR=$BRANCH_ABBR" >> $GITHUB_ENV
        echo "CONFIG_TYPE=$CONFIG_TYPE" >> $GITHUB_ENV
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        echo "GENERAL_CONFIG_FILE=$GENERAL_CONFIG_FILE" >> $GITHUB_ENV
        echo "CONFIG_TYPE_FILE=$CONFIG_TYPE_FILE" >> $GITHUB_ENV
        echo "DIY_SCRIPT=scripts/script.sh" >> $GITHUB_ENV  # 修改DIY_SCRIPT路径
        echo "CLASH_KERNEL=amd64" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=false" >> $GITHUB_ENV
        echo "FIRMWARE_RELEASE=false" >> $GITHUB_ENV  # 设置为false，因为最后会统一发布
        echo "FIRMWARE_TAG=${{ matrix.device }}" >> $GITHUB_ENV

    - name: 克隆源代码
      run: |
        df -hT $GITHUB_WORKSPACE
        sudo mkdir -p /mnt/openwrt
        sudo chown -R $(id -u):$(id -g) /mnt/openwrt
        git clone --depth 1 -b $REPO_BRANCH --single-branch $REPO_URL /mnt/openwrt
        cd /mnt/openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
        echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

    - name: 生成变量
      run: |
        # 合并配置文件（使用deconfig/路径）
        if [ -n "$LIBWRT_CONFIG_FILE" ]; then
          cat $GENERAL_CONFIG_FILE $CONFIG_TYPE_FILE $LIBWRT_CONFIG_FILE > $OPENWRT_PATH/.config
        else
          cat $GENERAL_CONFIG_FILE $CONFIG_TYPE_FILE > $OPENWRT_PATH/.config
        fi
        
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
        echo "CACHE_DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV

    - name: 缓存工具链
      uses: actions/cache@main
      with:
        # 修改缓存键生成规则
        key: ${{ env.DEVICE_TARGET }}-${{ env.HASH }} ${{ env.CACHE_DATE }}
        restore-keys: ${{ env.DEVICE_TARGET }}-${{ env.HASH }}-
        path: |
          ${{ env.OPENWRT_PATH }}/.ccache
          ${{ env.OPENWRT_PATH }}/staging_dir

    - name: 刷新缓存
      run: |
        if [ -d "$OPENWRT_PATH/staging_dir" ]; then
          find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
              find "$dir" -type f -exec touch {} +
          done
        fi

    - name: 安装feeds
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a
  
    - name: 加载自定义配置
      run: |
        chmod +x $DIY_SCRIPT
        cd $OPENWRT_PATH
        $GITHUB_WORKSPACE/$DIY_SCRIPT

    - name: 下载DL软件包
      run: |
        # 重新合并配置文件，确保使用最新的配置（使用deconfig/路径）
        if [ -n "$LIBWRT_CONFIG_FILE" ]; then
          cat $GENERAL_CONFIG_FILE $CONFIG_TYPE_FILE $LIBWRT_CONFIG_FILE > $OPENWRT_PATH/.config
        else
          cat $GENERAL_CONFIG_FILE $CONFIG_TYPE_FILE > $OPENWRT_PATH/.config
        fi
        
        cd $OPENWRT_PATH
        make defconfig
        make download -j$(nproc)

    - name: 编译固件
      id: compile
      run: |
        cd $OPENWRT_PATH
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 整理文件
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        
        # 创建输出目录
        OUTPUT_DIR="$GITHUB_WORKSPACE/output/${{ matrix.device }}"
        mkdir -p $OUTPUT_DIR
        
        # 复制并重命名配置文件
        cp $OPENWRT_PATH/.config $OUTPUT_DIR/${{ env.CHIP }}-${{ env.BRANCH_ABBR }}-${{ env.CONFIG_TYPE }}.config
        cp config.buildinfo $OUTPUT_DIR/${{ env.CHIP }}-${{ env.BRANCH_ABBR }}-${{ env.CONFIG_TYPE }}.config.buildinfo
        
        # 复制manifest文件
        if [ -f *.manifest ]; then
          cp *.manifest $OUTPUT_DIR/${{ env.CHIP }}-${{ env.BRANCH_ABBR }}-${{ env.CONFIG_TYPE }}.manifest
        fi
        
        # 复制并打包Packages
        mkdir -p packages
        mv -f $OPENWRT_PATH/bin/packages
