name: Release-IPQ60XX-QW
on:
  workflow_dispatch:
  workflow_call:
  schedule:
    - cron: 0 16 * * 4
env:
  # 通用配置
  REPO_URL: https://github.com/laipeng668/immortalwrt.git
  REPO_BRANCH: master
  GENERAL_CONFIG_FILE: deconfig/General.config
  BASE_CONFIG_FILE: deconfig/IPQ60XX.config
  PRO_CONFIG_FILE: deconfig/Pro.config
  MAX_CONFIG_FILE: deconfig/Max.config
  ULTRA_CONFIG_FILE: deconfig/Ultra.config
  LIBWRT_CONFIG_FILE: deconfig/Libwrt.config
  DIY_SCRIPT: scripts/script.sh
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: IPQ60XX
  TZ: Asia/Shanghai

jobs:
  # --- 预处理阶段：列出所有需要编译的 model ---
  Preprocess:
    runs-on: ubuntu-22.04
    outputs:
      models: ${{ steps.set-models.outputs.models }}
    steps:
      - name: Set Models List
        id: set-models
        run: |
          MODELS=(
            "ipq60xx_immwrt_Pro"
            "ipq60xx_immwrt_Max"
            "ipq60xx_immwrt_Ultra"
            "ipq60xx_openwrt_Pro"
            "ipq60xx_openwrt_Max"
            "ipq60xx_openwrt_Ultra"
            "ipq60xx_libwrt_Pro"
            "ipq60xx_libwrt_Max"
            "ipq60xx_libwrt_Ultra"
          )
          echo "models=${MODELS[*]}" >> $GITHUB_OUTPUT

  # --- 主构建作业 ---
  Build:
    needs: Preprocess
    runs-on: ubuntu-22.04
    steps:
      - name: Check Server Performance(检查服务器性能)
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB)"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Initialization Environment(初始化环境)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -y update
          sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"

      - name: Checkout(检出代码)
        uses: actions/checkout@main

      - name: Clone Source Code(克隆源代码)
        run: |
          df -hT $GITHUB_WORKSPACE
          sudo mkdir -p /mnt/openwrt
          sudo chown -R $(id -u):$(id -g) /mnt/openwrt
          git clone --depth 1 -b $REPO_BRANCH --single-branch $REPO_URL /mnt/openwrt
          cd /mnt/openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' target/linux/generic/kernel-6.12)
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV

      - name: Generate Variables(生成变量)
        run: |
          # 这个 job 会为每个 model 生成不同的配置并编译
          echo "Processing all models sequentially"
          MODELS=(${{ needs.Preprocess.outputs.models }})
          echo "Total models to process: ${#MODELS[@]}"

      - name: Cache Toolchain(缓存工具链)
        uses: actions/cache@main
        with:
          key: ${{ env.SOURCE_REPO }}-${{ env.HASH }} ${{ env.CACHE_DATE }}
          restore-keys: |
            ${{ env.SOURCE_REPO }}-${{ env.HASH }}-
            ${{ env.SOURCE_REPO }}-
          path: |
            ${{ env.OPENWRT_PATH }}/.ccache
            ${{ env.OPENWRT_PATH }}/staging_dir

      - name: Refresh The Cache(刷新缓存)
        run: |
          if [ -d "$OPENWRT_PATH/staging_dir" ]; then
            find "$OPENWRT_PATH/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Install Feeds(安装feeds)
        run: |
          cd $OPENWRT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration(加载自定义配置)
        run: |
          chmod +x $DIY_SCRIPT
          cd $OPENWRT_PATH
          $GITHUB_WORKSPACE/$DIY_SCRIPT

      - name: Compile All Models(编译所有模型)
        run: |
          cd $OPENWRT_PATH
          MODELS=(${{ needs.Preprocess.outputs.models }})
          for MODEL in "${MODELS[@]}"; do
            echo "Compiling model: $MODEL"
            
            # 解析 model 名称
            IFS='_' read -ra PARTS <<< "$MODEL"
            CHIP="${PARTS[0]}"
            BRANCH_ABBR="${PARTS[1]}"
            CONFIG_TYPE="${PARTS[2]}"
            
            echo "Chip: $CHIP"
            echo "Branch Abbreviation: $BRANCH_ABBR"
            echo "Config Type: $CONFIG_TYPE"
            
            # 根据分支缩写设置 REPO_URL 和 REPO_BRANCH
            REPO_URL=""
            REPO_BRANCH=""
            if [[ "$MODEL" == *"libwrt"* ]]; then
              REPO_URL="https://github.com/laipeng668/immortalwrt.git"
              REPO_BRANCH="k6.12-nss"
            elif [[ "$MODEL" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/laipeng668/openwrt.git"
              REPO_BRANCH="master"
            else
              REPO_URL="https://github.com/laipeng668/immortalwrt.git"
              REPO_BRANCH="master"
            fi
            
            # 复制基础配置文件
            if [ -f "${{ env.GENERAL_CONFIG_FILE }}" ]; then
              cp "${{ env.GENERAL_CONFIG_FILE }}" "${OPENWRT_PATH}/.config"
            else
              echo "Error: General.config not found."
              exit 1
            fi

            # 添加基础配置文件
            if [ -f "${{ env.BASE_CONFIG_FILE }}" ]; then
              cat "${{ env.BASE_CONFIG_FILE }}" >> "${OPENWRT_PATH}/.config"
            else
              echo "Error: Base config file not found."
              exit 1
            fi

            # 添加特定配置文件
            case "$CONFIG_TYPE" in
              "Pro")
                if [ -f "${{ env.PRO_CONFIG_FILE }}" ]; then
                  cat "${{ env.PRO_CONFIG_FILE }}" >> "${OPENWRT_PATH}/.config"
                else
                  echo "Error: Pro.config not found."
                  exit 1
                fi
                ;;
              "Max")
                if [ -f "${{ env.MAX_CONFIG_FILE }}" ]; then
                  cat "${{ env.MAX_CONFIG_FILE }}" >> "${OPENWRT_PATH}/.config"
                else
                  echo "Error: Max.config not found."
                  exit 1
                fi
                ;;
              "Ultra")
                if [ -f "${{ env.ULTRA_CONFIG_FILE }}" ]; then
                  cat "${{ env.ULTRA_CONFIG_FILE }}" >> "${OPENWRT_PATH}/.config"
                else
                  echo "Error: Ultra.config not found."
                  exit 1
                fi
                ;;
              *)
                echo "Unknown CONFIG_TYPE: $CONFIG_TYPE"
                exit 1
                ;;
            esac

            # 如果是 libwrt，则添加 Libwrt.config
            if [[ "$BRANCH_ABBR" == "libwrt" ]]; then
              if [ -f "${{ env.LIBWRT_CONFIG_FILE }}" ]; then
                cat "${{ env.LIBWRT_CONFIG_FILE }}" >> "${OPENWRT_PATH}/.config"
              else
                echo "Error: Libwrt.config not found."
                exit 1
              fi
            fi

            # 生成 defconfig
            make defconfig > /dev/null 2>&1
            SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
            echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
            DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
            echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
            DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
            echo "HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV
            echo "CACHE_DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV

            # 下载依赖
            make download -j$(nproc)

            # 编译固件
            echo "Compiling firmware for $MODEL..."
            make -j$(nproc) || make -j1 || make -j1 V=s

            # 整理文件
            echo "Organizing files for $MODEL..."
            cd bin/targets/*/*
            # 获取所有 .bin 文件
            BIN_FILES=$(find . -name "*.bin" -type f)
            echo "Found BIN files for $MODEL:"
            echo "$BIN_FILES"

            # 提取固件型号
            DEVICE_NAME=""
            if [ -f "$OPENWRT_PATH/.config" ]; then
              DEVICE_NAME=$(grep -E "^CONFIG_TARGET_DEVICE_NAME=" "$OPENWRT_PATH/.config" | cut -d'"' -f2)
            fi
            if [ -z "$DEVICE_NAME" ]; then
              echo "Warning: Could not extract DEVICE_NAME from .config, using default 'unknown_device'"
              DEVICE_NAME="unknown_device"
            fi
            echo "DEVICE_NAME from config: $DEVICE_NAME"

            # 重命名固件文件
            for file in $BIN_FILES; do
              filename=$(basename "$file")
              echo "Processing file: $filename"

              # 提取模式 (factory/sysupgrade)
              MODE=""
              if [[ "$filename" == *"factory"* ]]; then
                MODE="factory"
              elif [[ "$filename" == *"sysupgrade"* ]]; then
                MODE="sysupgrade"
              else
                echo "Warning: Unknown mode in filename: $filename"
                MODE="unknown"
              fi

              # 构造新的文件名
              # 原始命名: immortalwrt-qualcommax-ipq60xx-jdcloud_re-cs-02-squashfs-factory.bin
              # 新命名: immwrt-jdcloud_re-cs-02-factory-Pro.bin
              # 即: BRANCH_ABBR-DEVICE_NAME-MODE-CONFIG_TYPE.bin
              NEW_NAME="${BRANCH_ABBR}-${DEVICE_NAME}-${MODE}-${CONFIG_TYPE}.bin"
              echo "Renaming $filename to $NEW_NAME"
              mv "$file" "$NEW_NAME"
            done

            # 复制 config 文件
            cp "$OPENWRT_PATH/.config" "ipq60xx-${BRANCH_ABBR}-${CONFIG_TYPE}.config"
            # 复制 config.buildinfo
            if [ -f "config.buildinfo" ]; then
              cp config.buildinfo "ipq60xx-${BRANCH_ABBR}-${CONFIG_TYPE}.config.buildinfo"
            fi
            # 复制 manifest 文件
            PKG_MANIFEST_PATH="$OPENWRT_PATH/bin/packages/*/*/Packages.manifest"
            if [ -f "$PKG_MANIFEST_PATH" ]; then
              echo "Copying Packages.manifest from $PKG_MANIFEST_PATH"
              cp "$PKG_MANIFEST_PATH" "ipq60xx-${BRANCH_ABBR}-${CONFIG_TYPE}.Packages.manifest"
            else
              echo "Packages.manifest not found at expected path: $PKG_MANIFEST_PATH"
            fi

            # 清理不必要的文件
            rm -rf packages feeds.buildinfo version.buildinfo sha256sums profiles.json

            # 上传 artifact
            ARTIFACT_NAME="${MODEL}-firmware-${DEVICE_TARGET}-${DEVICE_SUBTARGET}-$(date +"%Y.%m.%d")"
            echo "Uploading artifact: $ARTIFACT_NAME"
            # 为每个模型创建独立的 artifact
            mkdir -p "/tmp/artifacts/${ARTIFACT_NAME}"
            find . -type f -exec cp {} "/tmp/artifacts/${ARTIFACT_NAME}/" \;

            echo "Finished compiling model: $MODEL"
          done

      - name: Upload All Firmware To Artifact(将所有固件上传到Artifact)
        if: env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@main
        with:
          name: all-firmware-${{ env.FILE_DATE }}
          path: /tmp/artifacts/*

  # --- 最终发布阶段：收集所有构建产物并发布到 Release ---
  Publish_Release:
    needs: [Preprocess, Build]
    runs-on: ubuntu-22.04
    if: always() # 确保即使某些构建失败也尝试发布
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@main
        with:
          path: artifacts/
          merge-multiple: true

      - name: List Downloaded Artifacts
        run: |
          echo "Checking artifacts directory..."
          if [ -d "artifacts/" ]; then
            echo "Artifacts downloaded:"
            find artifacts/ -type f -name "*.bin" -o -name "*.config" -o -name "*.manifest" -o -name "*.buildinfo" || echo "No files found"
          else
            echo "Artifacts directory does not exist."
            ls -la
          fi

      - name: Create Release Assets
        run: |
          # 创建一个临时目录来存放所有要发布的文件
          mkdir -p release_assets/
          # 尝试从 artifacts 目录复制文件
          if [ -d "artifacts/" ]; then
            echo "Copying files from artifacts directory..."
            find artifacts/ -type f \( -name "*.bin" -o -name "*.config" -o -name "*.manifest" -o -name "*.buildinfo" \) -exec cp {} release_assets/ \;
          else
            echo "No artifacts directory found."
          fi
          ls -l release_assets/

      - name: Upload to GitHub Release
        uses: ncipollo/release-action@main
        with:
          name: ${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: release_assets/*.bin # 仅包含 .bin 文件
          body: |
            **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
            ### 📒 固件信息
            - 这是开启全功能NSS的6.12内核固件，默认主题为Argon；该固件在ImmortalWrt的基础上，添加了额外的软件包cpufreq、ddns、ttyd、upnp、wolplus、samba4、vlmcsd、aria2、autoreboot、uhttpd、wifischedule、frps、frpc、diskman、hd-idle、banip、acme、arpbind、usb-printer、homeproxy、openlist、adguardhome、oaf、sqm、wireguard、watchcat、3cat（**Taiyi**额外增加了filebrowser、dockerman、gecoosac、lucky），并添加了若干工具，具体详见对应机型的config。
            - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 OpenWrt 固件
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🌐 默认地址: **192.168.2.1**
            - 🔑 默认密码: none
            ### 🧊 固件版本
            - 固件内核版本：**${{ env.VERSION_KERNEL }}**
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.VERSION_INFO }}
            ### 📦 附件列表 (由 GitHub Actions 自动构建)
            - 所有编译产物均已包含在本 Release 中。
