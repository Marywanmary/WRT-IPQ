name: Release-IPQ60XX-CZ3

on:
  workflow_dispatch:
  workflow_call:
  schedule:
    - cron: 0 20 * * 4

env:
  TZ: Asia/Shanghai
  REPO_MAP: |
    immwrt|https://github.com/laipeng668/immortalwrt.git|master|immwrt
    openwrt|https://github.com/laipeng668/openwrt.git|master|openwrt
    libwrt|https://github.com/laipeng668/openwrt-6.x.git|k6.12-nss|libwrt
  CONFIG_MAP: |
    Pro|deconfig/Pro.config
    Max|deconfig/Max.config
    Ultra|deconfig/Ultra.config
  GENERAL_CONFIG: "deconfig/General.config"
  BASE_CONFIG: "deconfig/IPQ60XX.config"
  LIBWRT_CONFIG: "deconfig/Libwrt.config"
  DIY_SCRIPT: "scripts/script.sh"
  SHARED_LOGS_DIR: ${{ github.workspace }}/logs
  SHARED_ARTIFACTS_DIR: ${{ github.workspace }}/artifacts
  BASE_WORK_DIR: "${{ github.workspace }}/openwrt_build"
  PARALLEL_COMPILE: "-j$(nproc)"
  SINGLE_THREAD: "-j1"
  VERBOSE_COMPILE: "-j1 V=s"
  MAX_RETRIES: 3
  RETRY_INTERVAL: 10
  DOWNLOAD_RETRY_INTERVAL: 15
  MIN_DISK_SPACE_KB: 10485760

jobs:
  Setup:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout(检出代码)
      uses: actions/checkout@main

    - name: Initialization Environment(初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set -euxo pipefail
        for i in $(seq 1 ${{ env.MAX_RETRIES }}); do
          if sudo -E apt-get -y update; then
            break
          elif [ $i -eq ${{ env.MAX_RETRIES }} ]; then
            echo "Failed to update package list after ${{ env.MAX_RETRIES }} attempts"
            exit 1
          else
            echo "Retrying package list update..."
            sleep ${{ env.RETRY_INTERVAL }}
          fi
        done
        
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"
        
        mkdir -p ${{ env.SHARED_LOGS_DIR }}
        mkdir -p ${{ env.SHARED_ARTIFACTS_DIR }}
        mkdir -p ${{ env.BASE_WORK_DIR }}

    - name: Check Server Performance(检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB)"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

  Base_Build:
    runs-on: ubuntu-22.04
    needs: Setup
    strategy:
      matrix:
        branch: [immwrt, openwrt, libwrt]
      max-parallel: 3

    steps:
    - name: Checkout(检出代码)
      uses: actions/checkout@main

    - name: Setup Variables(设置变量)
      id: setup_vars
      run: |
        set -euxo pipefail
        REPO_LINE=$(echo "${{ env.REPO_MAP }}" | grep "^${{ matrix.branch }}|")
        REPO_URL=$(echo "$REPO_LINE" | cut -d'|' -f2)
        REPO_BRANCH=$(echo "$REPO_LINE" | cut -d'|' -f3)
        SOURCE_REPO=$(echo "$REPO_URL" | awk -F '/' '{print $(NF)}' | sed 's/\.git$//')
        BRANCH_WORK_DIR="${{ env.BASE_WORK_DIR }}/${{ matrix.branch }}"
        
        echo "BRANCH_ABBR=${{ matrix.branch }}" >> $GITHUB_OUTPUT
        echo "REPO_URL=$REPO_URL" >> $GITHUB_OUTPUT
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_OUTPUT
        echo "BRANCH_WORK_DIR=$BRANCH_WORK_DIR" >> $GITHUB_OUTPUT
        
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        echo "HASH=$(git log -1 --pretty=format:'%h' 2>/dev/null || echo 'unknown')" >> $GITHUB_ENV

    - name: Check Disk Space(检查磁盘空间)
      run: |
        set -euxo pipefail
        AVAILABLE_SPACE=$(df -k --output=avail / | tail -1)
        if [ "$AVAILABLE_SPACE" -lt ${{ env.MIN_DISK_SPACE_KB }} ]; then
          echo "Error: Insufficient disk space ($(($AVAILABLE_SPACE/1024))MB available, at least $((${{ env.MIN_DISK_SPACE_KB }}/1024))MB required)"
          exit 1
        fi

    - name: Clone Source Code(克隆源代码)
      id: clone
      run: |
        set -euxo pipefail
        df -hT $GITHUB_WORKSPACE
        
        mkdir -p "${{ steps.setup_vars.outputs.BRANCH_WORK_DIR }}"
        
        for i in $(seq 1 ${{ env.MAX_RETRIES }}); do
          if git clone --depth 1 -b "${{ steps.setup_vars.outputs.REPO_BRANCH }}" --single-branch "${{ steps.setup_vars.outputs.REPO_URL }}" "${{ steps.setup_vars.outputs.BRANCH_WORK_DIR }}"; then
            break
          elif [ $i -eq ${{ env.MAX_RETRIES }} ]; then
            echo "Failed to clone repository after ${{ env.MAX_RETRIES }} attempts"
            exit 1
          else
            echo "Retrying clone..."
            rm -rf "${{ steps.setup_vars.outputs.BRANCH_WORK_DIR }}"
            sleep ${{ env.RETRY_INTERVAL }}
          fi
        done
        
        cd "${{ steps.setup_vars.outputs.BRANCH_WORK_DIR }}"
        OPENWRT_PATH="$PWD"
        
        echo "OPENWRT_PATH=$OPENWRT_PATH" >> $GITHUB_OUTPUT
        
        cat ${{ env.GENERAL_CONFIG }} ${{ env.BASE_CONFIG }} > "$OPENWRT_PATH/.config"
        if [ "${{ matrix.branch }}" = "libwrt" ]; then
          cat ${{ env.LIBWRT_CONFIG }} >> "$OPENWRT_PATH/.config"
        fi
        cd "$OPENWRT_PATH"
        make defconfig > /dev/null 2>&1

    - name: Cache Toolchain(缓存工具链)
      uses: actions/cache@main
      with:
        key: ${{ env.SOURCE_REPO }}-${{ env.HASH }}-${{ matrix.branch }}-base-${{ hashFiles('**/.config') }}
        restore-keys: |
          ${{ env.SOURCE_REPO }}-${{ env.HASH }}-${{ matrix.branch }}-base-
          ${{ env.SOURCE_REPO }}-${{ env.HASH }}-${{ matrix.branch }}-
          ${{ env.SOURCE_REPO }}-${{ env.HASH }}-
          ${{ env.SOURCE_REPO }}-
        path: |
          ${{ steps.clone.outputs.OPENWRT_PATH }}/.ccache
          ${{ steps.clone.outputs.OPENWRT_PATH }}/staging_dir
          ${{ steps.clone.outputs.OPENWRT_PATH }}/dl

    - name: Refresh The Cache(刷新缓存)
      run: |
        set -euxo pipefail
        if [ -d "${{ steps.clone.outputs.OPENWRT_PATH }}/staging_dir" ]; then
          find "${{ steps.clone.outputs.OPENWRT_PATH }}/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
              find "$dir" -type f -exec touch {} +
          done
        fi

    - name: Install Feeds(安装feeds)
      run: |
        set -euxo pipefail
        cd "${{ steps.clone.outputs.OPENWRT_PATH }}"
        for i in $(seq 1 ${{ env.MAX_RETRIES }}); do
          if ./scripts/feeds update -a && ./scripts/feeds install -a; then
            break
          elif [ $i -eq ${{ env.MAX_RETRIES }} ]; then
            echo "Failed to install feeds after ${{ env.MAX_RETRIES }} attempts"
            exit 1
          else
            echo "Retrying feeds install..."
            sleep ${{ env.RETRY_INTERVAL }}
          fi
        done
  
    - name: Load Custom Configuration(加载自定义配置)
      run: |
        set -euxo pipefail
        chmod +x ${{ env.DIY_SCRIPT }}
        cd "${{ steps.clone.outputs.OPENWRT_PATH }}"
        $GITHUB_WORKSPACE/${{ env.DIY_SCRIPT }}

    - name: Download DL Package(下载DL软件包)
      run: |
        set -euxo pipefail
        cd "${{ steps.clone.outputs.OPENWRT_PATH }}"
        for i in $(seq 1 ${{ env.MAX_RETRIES }}); do
          if make download ${{ env.PARALLEL_COMPILE }}; then
            break
          elif [ $i -eq ${{ env.MAX_RETRIES }} ]; then
            echo "Failed to download packages after ${{ env.MAX_RETRIES }} attempts"
            exit 1
          else
            echo "Retrying package download..."
            sleep ${{ env.DOWNLOAD_RETRY_INTERVAL }}
          fi
        done

    - name: Compile Base Firmware(编译基础固件)
      id: compile
      run: |
        set -euxo pipefail
        cd "${{ steps.clone.outputs.OPENWRT_PATH }}"
        echo -e "$(nproc) thread compile"
        
        if ! make ${{ env.PARALLEL_COMPILE }} toolchain/install; then
            echo "Toolchain build failed, trying single thread..."
            make ${{ env.SINGLE_THREAD }} toolchain/install
        fi
        
        if ! make ${{ env.PARALLEL_COMPILE }} package/compile; then
            echo "Package compile failed, trying single thread..."
            make ${{ env.SINGLE_THREAD }} package/compile
        fi
        
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check Space Usage(检查空间使用情况)
      if: (!cancelled())
      run: df -hT

    - name: Build Status Report(构建状态报告)
      if: always()
      run: |
        set -euxo pipefail
        echo "## 基础构建状态报告" >> $GITHUB_STEP_SUMMARY
        echo "| 分支 | 状态 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        
        status="✅ 成功"
        if [ "${{ steps.compile.outputs.status }}" != "success" ]; then
          status="❌ 失败"
        fi
        
        echo "| ${{ matrix.branch }} | $status |" >> $GITHUB_STEP_SUMMARY

  Config_Build:
    runs-on: ubuntu-22.04
    needs: Base_Build
    strategy:
      matrix:
        device: [
          "ipq60xx_immwrt_Pro",
          "ipq60xx_immwrt_Max", 
          "ipq60xx_immwrt_Ultra",
          "ipq60xx_openwrt_Pro",
          "ipq60xx_openwrt_Max",
          "ipq60xx_openwrt_Ultra",
          "ipq60xx_libwrt_Pro",
          "ipq60xx_libwrt_Max",
          "ipq60xx_libwrt_Ultra"
        ]
      max-parallel: 6

    steps:
    - name: Checkout(检出代码)
      uses: actions/checkout@main

    - name: Setup Variables(设置变量)
      id: setup_vars
      run: |
        set -euxo pipefail
        CHIP=$(echo "${{ matrix.device }}" | cut -d'_' -f1)
        BRANCH_ABBR=$(echo "${{ matrix.device }}" | cut -d'_' -f2)
        CONFIG_TYPE=$(echo "${{ matrix.device }}" | cut -d'_' -f3)
        
        REPO_LINE=$(echo "${{ env.REPO_MAP }}" | grep "^$BRANCH_ABBR|")
        REPO_URL=$(echo "$REPO_LINE" | cut -d'|' -f2)
        REPO_BRANCH=$(echo "$REPO_LINE" | cut -d'|' -f3)
        
        CONFIG_LINE=$(echo "${{ env.CONFIG_MAP }}" | grep "^$CONFIG_TYPE|")
        CONFIG_FILE=$(echo "$CONFIG_LINE" | cut -d'|' -f2)
        
        DEVICE_PREFIX="${CHIP}-${BRANCH_ABBR}-${CONFIG_TYPE}"
        SOURCE_REPO=$(echo "$REPO_URL" | awk -F '/' '{print $(NF)}' | sed 's/\.git$//')
        BRANCH_WORK_DIR="${{ env.BASE_WORK_DIR }}/${BRANCH_ABBR}"
        
        echo "CHIP=$CHIP" >> $GITHUB_OUTPUT
        echo "BRANCH_ABBR=$BRANCH_ABBR" >> $GITHUB_OUTPUT
        echo "CONFIG_TYPE=$CONFIG_TYPE" >> $GITHUB_OUTPUT
        echo "REPO_URL=$REPO_URL" >> $GITHUB_OUTPUT
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_OUTPUT
        echo "DEVICE_PREFIX=$DEVICE_PREFIX" >> $GITHUB_OUTPUT
        echo "BRANCH_WORK_DIR=$BRANCH_WORK_DIR" >> $GITHUB_OUTPUT
        echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_OUTPUT
        
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        echo "HASH=$(git log -1 --pretty=format:'%h' 2>/dev/null || echo 'unknown')" >> $GITHUB_ENV

    - name: Check Disk Space(检查磁盘空间)
      run: |
        set -euxo pipefail
        AVAILABLE_SPACE=$(df -k --output=avail / | tail -1)
        if [ "$AVAILABLE_SPACE" -lt ${{ env.MIN_DISK_SPACE_KB }} ]; then
          echo "Error: Insufficient disk space ($(($AVAILABLE_SPACE/1024))MB available, at least $((${{ env.MIN_DISK_SPACE_KB }}/1024))MB required)"
          exit 1
        fi

    - name: Prepare Build Environment(准备构建环境)
      id: prepare_env
      run: |
        set -euxo pipefail
        mkdir -p "${{ env.BASE_WORK_DIR }}/${{ matrix.device }}"
        
        ln -sf "${{ steps.setup_vars.outputs.BRANCH_WORK_DIR }}" "${{ env.BASE_WORK_DIR }}/${{ matrix.device }}/source"
        
        OPENWRT_PATH="${{ env.BASE_WORK_DIR }}/${{ matrix.device }}/source"
        
        echo "OPENWRT_PATH=$OPENWRT_PATH" >> $GITHUB_OUTPUT

    - name: Apply Configuration(应用配置)
      run: |
        set -euxo pipefail
        cd "${{ steps.prepare_env.outputs.OPENWRT_PATH }}"
        
        # 修复的配置文件合并语法
        cat "${{ env.GENERAL_CONFIG }}" "${{ env.BASE_CONFIG }}" "${{ steps.setup_vars.outputs.CONFIG_FILE }}" > .config
        
        if [ "${{ steps.setup_vars.outputs.BRANCH_ABBR }}" = "libwrt" ]; then
          cat "${{ env.LIBWRT_CONFIG }}" >> .config
        fi
        
        make defconfig > /dev/null 2>&1
        make package/install

    - name: Generate Firmware(生成固件)
      id: compile
      run: |
        set -euxo pipefail
        cd "${{ steps.prepare_env.outputs.OPENWRT_PATH }}"
        
        if ! make ${{ env.PARALLEL_COMPILE }} image 2>&1 | tee build.log; then
            echo "Image build failed, trying single thread..."
            if ! make ${{ env.SINGLE_THREAD }} image 2>&1 | tee -a build.log; then
                echo "Single thread build failed, trying with verbose output..."
                make ${{ env.VERBOSE_COMPILE }} image 2>&1 | tee -a build.log
                echo "status=failed" >> $GITHUB_OUTPUT
                exit 1
            fi
        fi
        
        grep -i 'error\|warning' build.log > error_warning.log || true
        grep -o 'luci-[^ ]*' build.log | sort -u > luci_packages_list.txt || true
        
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check Space Usage(检查空间使用情况)
      if: (!cancelled())
      run: df -hT

    - name: Organize Files(整理文件)
      if: steps.compile.outputs.status == 'success'
      run: |
        set -euxo pipefail
        BIN_DIR="${{ steps.prepare_env.outputs.OPENWRT_PATH }}/bin/targets/*/*"
        if [ ! -d "$BIN_DIR" ]; then
          echo "Error: Bin directory not found"
          exit 1
        fi
        cd "$BIN_DIR"
        
        DEVICE_OUTPUT_DIR="${{ env.SHARED_ARTIFACTS_DIR }}/${{ matrix.device }}"
        mkdir -p "$DEVICE_OUTPUT_DIR"
        
        cp "${{ steps.prepare_env.outputs.OPENWRT_PATH }}/.config" "$DEVICE_OUTPUT_DIR/${{ steps.setup_vars.outputs.DEVICE_PREFIX }}.config" || echo "Warning: .config copy failed"
        
        if [ -f "config.buildinfo" ]; then
          cp config.buildinfo "$DEVICE_OUTPUT_DIR/${{ steps.setup_vars.outputs.DEVICE_PREFIX }}.config.buildinfo"
        fi
        
        if ls *.manifest 1> /dev/null 2>&1; then
          cp *.manifest "$DEVICE_OUTPUT_DIR/${{ steps.setup_vars.outputs.DEVICE_PREFIX }}.manifest"
        fi
        
        for file in *.bin; do
          [ -f "$file" ] || continue
          [[ "$file" =~ factory|sysupgrade ]] || continue
          
          MODE=$(echo "$file" | grep -oE "factory|sysupgrade")
          
          CHIP="${{ steps.setup_vars.outputs.CHIP }}"
          if [[ "$file" =~ ${CHIP}-(.+)-squashfs ]]; then
            MODEL="${BASH_REMATCH[1]}"
          else
            MODEL="unknown-model"
            echo "Warning: Could not determine model from filename: $file"
          fi
          
          BRANCH_ABBR="${{ steps.setup_vars.outputs.BRANCH_ABBR }}"
          CONFIG_TYPE="${{ steps.setup_vars.outputs.CONFIG_TYPE }}"
          
          NEW_NAME="${BRANCH_ABBR}-${MODEL}-${MODE}-${CONFIG_TYPE}.bin"
          cp "$file" "$DEVICE_OUTPUT_DIR/$NEW_NAME"
          echo "Renamed: $file -> $NEW_NAME"
        done
        
        PKG_DIR="${{ steps.prepare_env.outputs.OPENWRT_PATH }}/bin/packages"
        if [ -d "$PKG_DIR" ]; then
          mkdir -p "${{ env.SHARED_ARTIFACTS_DIR }}/all_packages"
          find "$PKG_DIR" -name "*.ipk" -o -name "*.apk" | while read -r pkg; do
            cp "$pkg" "${{ env.SHARED_ARTIFACTS_DIR }}/all_packages/"
          done
        fi
        
        mkdir -p "${{ env.SHARED_ARTIFACTS_DIR }}/all_logs"
        LOG_FILES=(
          "${{ steps.prepare_env.outputs.OPENWRT_PATH }}/build.log"
          "${{ steps.prepare_env.outputs.OPENWRT_PATH }}/error_warning.log"
          "${{ steps.prepare_env.outputs.OPENWRT_PATH }}/luci_packages_list.txt"
        )
        for log_file in "${LOG_FILES[@]}"; do
          if [ -f "$log_file" ]; then
            log_name=$(basename "$log_file")
            cp "$log_file" "${{ env.SHARED_ARTIFACTS_DIR }}/all_logs/${{ matrix.device }}_${log_name}"
          fi
        done

    - name: Cleanup Workspace(清理工作空间)
      if: always()
      run: |
        set -euxo pipefail
        rm -rf "${{ env.BASE_WORK_DIR }}/${{ matrix.device }}"

    - name: Build Status Report(构建状态报告)
      if: always()
      run: |
        set -euxo pipefail
        echo "## 配置构建状态报告" >> $GITHUB_STEP_SUMMARY
        echo "| 设备 | 状态 |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        
        status="✅ 成功"
        if [ "${{ steps.compile.outputs.status }}" != "success" ]; then
          status="❌ 失败"
        fi
        
        echo "| ${{ matrix.device }} | $status |" >> $GITHUB_STEP_SUMMARY

  Package_Artifacts:
    runs-on: ubuntu-22.04
    needs: [Base_Build, Config_Build]
    if: always()
    steps:
    - name: Checkout(检出代码)
      uses: actions/checkout@main

    - name: Merge and Deduplicate Packages(合并并去重软件包)
      run: |
        set -euxo pipefail
        PKG_DIR="${{ env.SHARED_ARTIFACTS_DIR }}/all_packages"
        
        if [ ! -d "$PKG_DIR" ]; then
          echo "Warning: Packages directory not found"
          touch "${{ env.SHARED_ARTIFACTS_DIR }}/packages_list.txt"
          exit 0
        fi
        
        cd "$PKG_DIR"
        
        find . -name "*.ipk" -o -name "*.apk" | while read -r file; do
          size=$(stat -c%s "$file")
          mtime=$(stat -c%Y "$file")
          echo "$size $mtime $file"
        done | sort -u | cut -d' ' -f3- > potential_unique_files.txt
        
        > checksums.txt
        > unique_files.txt
        
        while read -r file; do
          [ -f "$file" ] || continue
          md5=$(md5sum "$file" | cut -d' ' -f1)
          if ! grep -q "^$md5 " checksums.txt; then
            echo "$md5 $file" >> checksums.txt
            echo "$file" >> unique_files.txt
          fi
        done < potential_unique_files.txt
        
        DEDUP_DIR="${{ env.SHARED_ARTIFACTS_DIR }}/dedup_packages"
        mkdir -p "$DEDUP_DIR"
        
        while read -r file; do
          cp "$file" "$DEDUP_DIR/"
        done < unique_files.txt
        
        cd "$DEDUP_DIR"
        find . -name "*.ipk" -o -name "*.apk" | sed 's|^\./||' | sort > "${{ env.SHARED_ARTIFACTS_DIR }}/packages_list.txt"
        
        cd "${{ env.SHARED_ARTIFACTS_DIR }}"
        tar -czf "packages-all.tar.gz" -C dedup_packages .
        
        echo "Packages merged and deduplicated to packages-all.tar.gz"

    - name: Merge Logs(合并日志)
      run: |
        set -euxo pipefail
        LOG_DIR="${{ env.SHARED_ARTIFACTS_DIR }}/all_logs"
        
        if [ ! -d "$LOG_DIR" ]; then
          echo "Warning: Logs directory not found"
          exit 0
        fi
        
        cd "${{ env.SHARED_ARTIFACTS_DIR }}"
        tar -czf "logs-all.tar.gz" -C all_logs .
        
        echo "Logs merged to logs-all.tar.gz"

    - name: Generate Release Info(生成Release信息)
      run: |
        set -euxo pipefail
        cat > "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md" << EOF
# IPQ60XX 固件构建信息

## 构建时间
$(date -u +"%Y-%m-%d %H:%M:%S UTC")

## 构建设备
EOF

        for device_dir in ${{ env.SHARED_ARTIFACTS_DIR }}/*/; do
          device_name=$(basename "$device_dir")
          if [[ "$device_name" == all_* ]] || [[ "$device_name" == dedup_* ]]; then
            continue
          fi
          
          echo "" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
          echo "### $device_name" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
          
          if ls "$device_dir"/*.bin 1> /dev/null 2>&1; then
            echo "**固件文件**:" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
            for bin_file in "$device_dir"/*.bin; do
              echo "- $(basename "$bin_file")" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
            done
          else
            echo "**固件文件**: 构建失败" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
          fi
          
          if [ -f "$device_dir"/*.config ]; then
            echo "**配置文件**:" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
            echo "- $(ls "$device_dir"/*.config | xargs -n1 basename)" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
          fi
        done
        
        echo "" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
        echo "## 软件包列表" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
        echo '```' >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
        cat "${{ env.SHARED_ARTIFACTS_DIR }}/packages_list.txt" >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"
        echo '```' >> "${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md"

    - name: Upload Artifacts(上传构建产物)
      uses: actions/upload-artifact@main
      with:
        name: release-artifacts
        path: |
          ${{ env.SHARED_ARTIFACTS_DIR }}/packages-all.tar.gz
          ${{ env.SHARED_ARTIFACTS_DIR }}/logs-all.tar.gz
          ${{ env.SHARED_ARTIFACTS_DIR }}/release_info.md
          ${{ env.SHARED_ARTIFACTS_DIR }}/*/
        retention-days: 30
